// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  P_number           Int      @id

  name               String
  phone_number       BigInt
  CGPA               Float     
  email              String
  DOB                DateTime
  profile_picture    String?

  courses            SRC[]
  subjective_answers SSA[]
  Objective_answers  SOA[]
}

model SRC {
  SRC_ID    Int      @id

  Student   Student  @relation(fields: [P_number], references: [P_number])
  P_number  Int

  Course    Course   @relation(fields: [CourseId], references: [Course_Code])
  CourseId  Int  
}

model Course {
  Course_Code  Int      @id

  Course_name  String
  Credit_hours Int
  Department   String  

  students     SRC[]
  faculty      FTC[]

  paper        Paper?
}

model Faculty {
  Faculty_ID      Int               @id

  name            String
  level           Int
  email           String
  department      String
  Phone_number    Int
  profile_picture String?

  courses         FTC[]
  paperapproval   PaperApproval?
} 

model FTC {
  FTC_ID      Int     @id

  Faculty     Faculty @relation(fields: [Faculty_ID], references: [Faculty_ID])
  Faculty_ID  Int

  Course      Course  @relation(fields: [Course_Code], references: [Course_Code])
  Course_Code Int
}

model PaperApproval {
  PaperApprovalId Int       @id

  level           Int
  approved        Boolean

  Paper_ID        Int       @unique
  paper           Paper     @relation(fields: [Paper_ID], references: [PaperID])


  Faculty_ID      Int       @unique
  faculty         Faculty   @relation(fields: [Faculty_ID], references: [Faculty_ID])
}

model Paper {
  PaperID     Int               @id

  Course      Course            @relation(fields: [Course_Code], references: [Course_Code])
  Course_Code Int               @unique
  
  ExamOfficer PaperApproval?

  Time        DateTime          @db.Time()
  Date        DateTime          @db.Date()

  SQs         SubjectiveQuestion[]
  OQs         ObjectiveQuestion[]
}

model SubjectiveQuestion {
  SQ_ID            Int                  @id
  
  Question         String
  Long_Question    Boolean
  Marks            Int

  paper            Paper                @relation(fields: [PaperID], references: [PaperID])
  PaperID          Int

  
  Child_Quetion    SubjectiveQuestion[] @relation("QuestionByParts")
  
  Parent_SQ_ID     Int?
  Parent_Question  SubjectiveQuestion?  @relation("QuestionByParts", fields: [Parent_SQ_ID], references: [SQ_ID])

  student_attempts SSA[] 
}

//Student Subjective Question Attempt
model SSA {
  SOA_ID    Int                @id

  SQ_ID     Int
  SQ        SubjectiveQuestion @relation(fields: [SQ_ID], references: [SQ_ID])

  P_Number  Int
  student   Student            @relation(fields: [P_Number], references: [P_number])

  answer    String
}

model ObjectiveQuestion {
  OQ_ID            Int     @id
  
  Question         String
  Answers          String
  Marks            Int

  paper            Paper   @relation(fields: [PaperID], references: [PaperID])
  PaperID          Int

  student_attempst SOA[]
}

//Student Objective Question Attempt
model SOA {
  SOA_ID    Int                @id

  OQ_ID     Int
  OQ        ObjectiveQuestion  @relation(fields: [OQ_ID], references: [OQ_ID])

  P_Number  Int
  student   Student            @relation(fields: [P_Number], references: [P_number])

  answer    String
}