// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  p_number           Int      @id

  name               String
  password           String
  phone_number       String
  cgpa               Float     
  email              String
  DOB                DateTime
  profile_picture    String?

  courses            SRC[]
  subjective_answers SSA[]
  objective_answers  SOA[]
}

model SRC {
  src_id       String   @id @default(uuid())

  student      Student  @relation(fields: [p_number], references: [p_number])
  p_number     Int

  course       Course   @relation(fields: [course_code], references: [course_code])
  course_code  Int  
}

model Course {
  course_code  Int      @id @unique

  course_name  String
  credit_hours Int
  department   String  

  students     SRC[]
  faculty      FTC[]

  paper        Paper[]
}

model Faculty {
  faculty_id      String          @id @default(uuid())

  name            String
  password        String
  level           Int
  email           String
  department      String
  phone_number    String
  profile_picture String?

  courses         FTC[]
  paperapproval   PaperApproval?
} 

model FTC {
  ftc_id      String  @id @default(uuid())

  faculty     Faculty @relation(fields: [faculty_id], references: [faculty_id])
  faculty_id  String

  course      Course  @relation(fields: [course_code], references: [course_code])
  course_code Int
}

model PaperApproval {
  paperapproval_id String    @id @default(uuid())

  level            Int
  approved         Boolean

  paper_id         String    @unique
  paper            Paper     @relation(fields: [paper_id], references: [paper_id])


  faculty_id       String    @unique
  faculty          Faculty   @relation(fields: [faculty_id], references: [faculty_id])
}

model Paper {
  paper_id                 String            @id @default(uuid())
  paper_name               String
  course                   Course?            @relation(fields: [course_code], references: [course_code])
  course_code              Int?               
  paper_type               String
  examofficer              PaperApproval?

  time                     String          
  date                     String          
  duration                 Int
  weightage                Int

  subjective_questions     SubjectiveQuestion[]
  objective_questions      ObjectiveQuestion[]
}

model SubjectiveQuestion {
  sq_id            String               @id @default(uuid())

  question         String
  long_question    Boolean
  marks            Int

  paper            Paper                @relation(fields: [paper_id], references: [paper_id])
  paper_id         String

  
  child_quetion    SubjectiveQuestion[] @relation("QuestionByParts")
  
  parent_sq_id     String?
  parent_question  SubjectiveQuestion?  @relation("QuestionByParts", fields: [parent_sq_id], references: [sq_id])

  student_attempts SSA[] 
}

//Student Subjective Question Attempt
model SSA {
  soa_id                 String             @id @default(uuid())

  sq_id                  String
  subjective_question    SubjectiveQuestion @relation(fields: [sq_id], references: [sq_id])

  p_number               Int
  student                Student            @relation(fields: [p_number], references: [p_number])

  answer                 String
}

model ObjectiveQuestion {
  oq_id            String  @id @default(uuid())
  
  question         String
  answers          String
  correct_answer   String
  marks            Int

  paper            Paper   @relation(fields: [paper_id], references: [paper_id])
  paper_id         String

  student_attempst SOA[]
}

//Student Objective Question Attempt
model SOA {
  soa_id               String             @id @default(uuid())

  oq_id                String
  objective_question   ObjectiveQuestion  @relation(fields: [oq_id], references: [oq_id])

  p_number             Int
  student              Student            @relation(fields: [p_number], references: [p_number])

  answer               String
}